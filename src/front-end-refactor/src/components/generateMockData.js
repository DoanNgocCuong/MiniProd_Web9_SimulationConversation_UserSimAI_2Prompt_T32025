export const generateMockData = (selectedPrompts) => {
    return selectedPrompts.map(prompt => {
        const contentLines = prompt.content.split('\n');
        const nameLine = contentLines.find(line => line.trim().startsWith('User:'));
        const ageLine = contentLines.find(line => line.trim().startsWith('Age & Level:'));
        const personalityLine = contentLines.find(line => line.trim().startsWith('Personality:'));

        const userName = nameLine ? nameLine.replace('User:', '').trim() : 'Unknown User';
        const ageMatch = ageLine ? ageLine.match(/(\d+)\s+years/) : null;
        const age = ageMatch ? parseInt(ageMatch[1]) : 5;

        const personality = personalityLine ? personalityLine.replace('Personality:', '').trim() : '';
        const isStubborn = personality.toLowerCase().includes('stubborn') ||
            personality.toLowerCase().includes('resist') ||
            userName.includes('Bear') ||
            userName.includes('Tit');

        const isPlayful = personality.toLowerCase().includes('playful') ||
            personality.toLowerCase().includes('curious') ||
            userName.includes('Lu') ||
            userName.includes('Bao');

        const isIntelligent = personality.toLowerCase().includes('intelligent') ||
            personality.toLowerCase().includes('smart') ||
            userName.includes('An') ||
            userName.includes('Nam');

        const now = new Date();
        let messages = [];

        if (isStubborn) {
            messages = [
                {
                    role: 'assistant',
                    content: 'Xin ch√†o! H√¥m nay ch√∫ng ta s·∫Ω h·ªçc v·ªÅ c√°c con v·∫≠t. B·∫°n th√≠ch con v·∫≠t n√†o nh·∫•t?',
                    timestamp: new Date(now.getTime() - 60000).toISOString()
                },
                {
                    role: 'user',
                    content: 'T·ªõ kh√¥ng th√≠ch. Ch√°n l·∫Øm.',
                    timestamp: new Date(now.getTime() - 50000).toISOString()
                },
                {
                    role: 'assistant',
                    content: 'V·∫≠y ch√∫ng ta h·ªçc v·ªÅ m√†u s·∫Øc nh√©? ƒê√¢y l√† m√†u ƒë·ªè üî¥',
                    timestamp: new Date(now.getTime() - 40000).toISOString()
                },
                {
                    role: 'user',
                    content: 'T·ªõ bi·∫øt r·ªìi. Kh√¥ng th√≠ch h·ªçc.',
                    timestamp: new Date(now.getTime() - 30000).toISOString()
                },
                {
                    role: 'assistant',
                    content: 'Hay l√† ch∆°i tr√≤ ch∆°i ƒëo√°n h√¨nh? Nh√¨n h√¨nh n√†y gi·ªëng c√°i g√¨?',
                    timestamp: new Date(now.getTime() - 20000).toISOString()
                },
                {
                    role: 'user',
                    content: 'Kh√¥ng mu·ªën ch∆°i. T·ªõ mu·ªën xem video.',
                    timestamp: new Date(now.getTime() - 10000).toISOString()
                }
            ];
        } else if (isPlayful) {
            messages = [
                {
                    role: 'assistant',
                    content: 'Xin ch√†o! H√¥m nay ch√∫ng ta s·∫Ω h·ªçc v·ªÅ m√†u s·∫Øc b·∫±ng tr√≤ ch∆°i. B·∫°n th√≠ch kh√¥ng?',
                    timestamp: new Date(now.getTime() - 60000).toISOString()
                },
                {
                    role: 'user',
                    content: 'T·ªõ th√≠ch ch∆°i. Ch∆°i g√¨ v·∫≠y?',
                    timestamp: new Date(now.getTime() - 50000).toISOString()
                },
                {
                    role: 'assistant',
                    content: 'Tr√≤ ch∆°i t√¨m ƒë·ªì v·∫≠t c√≥ m√†u ƒë·ªè. B·∫°n c√≥ th·ªÉ t√¨m ƒë∆∞·ª£c kh√¥ng?',
                    timestamp: new Date(now.getTime() - 40000).toISOString()
                },
                {
                    role: 'user',
                    content: 'Qu·∫£ t√°o ƒë·ªè. √Åo ƒë·ªè n·ªØa.',
                    timestamp: new Date(now.getTime() - 30000).toISOString()
                },
                {
                    role: 'assistant',
                    content: 'Gi·ªèi l·∫Øm! B√¢y gi·ªù t√¨m ƒë·ªì v·∫≠t m√†u xanh nh√©?',
                    timestamp: new Date(now.getTime() - 20000).toISOString()
                },
                {
                    role: 'user',
                    content: 'T·ªõ th·∫•y l√° c√¢y. B·∫ßu tr·ªùi xanh n·ªØa.',
                    timestamp: new Date(now.getTime() - 10000).toISOString()
                }
            ];
        } else if (isIntelligent) {
            messages = [
                {
                    role: 'assistant',
                    content: 'H√¥m nay ch√∫ng ta s·∫Ω h·ªçc v·ªÅ ƒë·ªông v·∫≠t v√† m√¥i tr∆∞·ªùng s·ªëng c·ªßa ch√∫ng. B·∫°n ƒë√£ bi·∫øt con v·∫≠t n√†o s·ªëng d∆∞·ªõi n∆∞·ªõc?',
                    timestamp: new Date(now.getTime() - 60000).toISOString()
                },
                {
                    role: 'user',
                    content: 'C√° s·ªëng d∆∞·ªõi n∆∞·ªõc. C√° voi n·ªØa.',
                    timestamp: new Date(now.getTime() - 50000).toISOString()
                },
                {
                    role: 'assistant',
                    content: 'R·∫•t t·ªët! C√≤n ƒë·ªông v·∫≠t n√†o s·ªëng tr√™n c·∫°n?',
                    timestamp: new Date(now.getTime() - 40000).toISOString()
                },
                {
                    role: 'user',
                    content: 'Ch√≥ s·ªëng tr√™n c·∫°n. H·ªï b√°o s∆∞ t·ª≠.',
                    timestamp: new Date(now.getTime() - 30000).toISOString()
                },
                {
                    role: 'assistant',
                    content: 'B·∫°n bi·∫øt nhi·ªÅu qu√°! V·∫≠y c√≤n ƒë·ªông v·∫≠t s·ªëng ƒë∆∞·ª£c c·∫£ tr√™n c·∫°n v√† d∆∞·ªõi n∆∞·ªõc?',
                    timestamp: new Date(now.getTime() - 20000).toISOString()
                },
                {
                    role: 'user',
                    content: 'T·ªõ bi·∫øt ·∫øch nh√°i. C√° s·∫•u c≈©ng ƒë∆∞·ª£c.',
                    timestamp: new Date(now.getTime() - 10000).toISOString()
                }
            ];
        } else {
            messages = [
                {
                    role: 'assistant',
                    content: 'Ch√†o b·∫°n! H√¥m nay ch√∫ng ta s·∫Ω h·ªçc t·ª´ v·ª±ng v·ªÅ c√°c lo√†i ƒë·ªông v·∫≠t. B·∫°n th√≠ch con v·∫≠t n√†o?',
                    timestamp: new Date(now.getTime() - 60000).toISOString()
                },
                {
                    role: 'user',
                    content: 'T·ªõ th√≠ch m√®o. M√®o d·ªÖ th∆∞∆°ng.',
                    timestamp: new Date(now.getTime() - 50000).toISOString()
                },
                {
                    role: 'assistant',
                    content: 'M√®o ti·∫øng Anh l√† "cat". B·∫°n c√≥ th·ªÉ ƒë·ªçc theo kh√¥ng? C-A-T.',
                    timestamp: new Date(now.getTime() - 40000).toISOString()
                },
                {
                    role: 'user',
                    content: 'C√°t. T·ªõ th√≠ch m√®o c√°t.',
                    timestamp: new Date(now.getTime() - 30000).toISOString()
                },
                {
                    role: 'assistant',
                    content: 'Gi·ªèi l·∫Øm! B·∫°n th√≠ch con v·∫≠t n√†o n·ªØa kh√¥ng?',
                    timestamp: new Date(now.getTime() - 20000).toISOString()
                },
                {
                    role: 'user',
                    content: 'T·ªõ th√≠ch ch√≥. Ch√≥ trung th√†nh.',
                    timestamp: new Date(now.getTime() - 10000).toISOString()
                }
            ];
        }

        messages.forEach((msg, index) => {
            const randomOffset = Math.floor(Math.random() * 5000);
            const baseTime = now.getTime() - ((6 - index) * 10000) - randomOffset;
            msg.timestamp = new Date(baseTime).toISOString();
        });

        if (messages.length === 0) {
            messages = [
                {
                    role: 'assistant',
                    content: 'Xin ch√†o! B·∫°n th√≠ch h·ªçc v·ªÅ ch·ªß ƒë·ªÅ g√¨?',
                    timestamp: new Date(now.getTime() - 20000).toISOString()
                },
                {
                    role: 'user',
                    content: 'T·ªõ th√≠ch h·ªçc v·ªÅ ƒë·ªông v·∫≠t.',
                    timestamp: new Date(now.getTime() - 10000).toISOString()
                }
            ];
        }

        return {
            userInfo: prompt.content,
            messages: messages,
            showDetails: false
        };
    });
};